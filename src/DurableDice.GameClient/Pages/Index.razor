@implements IDisposable

@page "/"
@page "/{gameId}"

@using DurableDice.Common.Abstractions
@using DurableDice.Common.Models.Commands
@using DurableDice.GameClient.Services
@using Microsoft.AspNetCore.SignalR.Client;
@using DurableDice.Common.Models.State;

@if (string.IsNullOrEmpty(_playerName))
{
	<input placeholder="Enter your name" @bind="@_newPlayerName" />
	<button @onclick="JoinAsync">Set name</button>
}
else if (_gameState != null)
{
	<button @onclick="StartAsync">Start</button>

	<div class="players">
		@foreach (var (player, index) in _players)
		{
			var className = $"player player-{index}";
			if (player.Id == _gameState.ActivePlayerId)
			{
				className += " player-active";
			}
			if (player.Id == _gameState.OwnerId)
			{
				className += " player-owner";
			}

			<div class=@className>
				@player.Name (@(_gameState.PlayerFieldCount(player)) | @player.DiceBuffer)
			</div>
		}
	</div>

	if (_gameState.ActivePlayerId == _playerId)
	{
		<button @onclick="EndRoundAsync">End round</button>
	}

	<div class="fields">
		@foreach (var field in _gameState.Fields)
		{
			var ownerIndex = _gameState.Players.FindIndex(x => x.Id == field.OwnerId);

			var className = $"field player-{ownerIndex}";

			if (_playerId == field.OwnerId)
			{
				className += " field-owned";
			}

			<div class=@className @onclick=@(() => FieldClickAsync(field))>
				@field.DiceCount
			</div>
		}
	</div>
}

@code
{
	[Inject]
	public NavigationManager navManager { get; set; } = null!;

	[Parameter]
	public string? GameId { get; set; }

	private string _playerId { get; set; } = Guid.NewGuid().ToString();
	private string _newPlayerName = "";
	private string _playerName = "";

	private string _fromFieldId = "";
	private bool _attacking = false;

	private IGameEntity _gameEntity = null!;

	private GameState? _gameState;

	private IEnumerable<(Player player, int index)> _players
		=> _gameState?.Players.Select((player, index) => (player, index)) ?? throw new Exception();

	protected override void OnInitialized()
	{
		if (string.IsNullOrEmpty(GameId))
		{
			GameId = Guid.NewGuid().ToString();
			navManager.NavigateTo($"/{GameId}", false);
		}

		var gameEntityService = new GameEntityService(GameId);
		gameEntityService.NewStateReceived += NewState;

		_gameEntity = gameEntityService;
	}

	private void NewState(GameState state)
	{
		_gameState = state;

		if (_attacking)
		{
			_attacking = false;
			_fromFieldId = "";
		}

		StateHasChanged();
	}

	private async Task JoinAsync()
	{
		if (!string.IsNullOrWhiteSpace(_newPlayerName))
		{
			_playerName = _newPlayerName;

			_gameState = new GameState();

			await _gameEntity.AddPlayerAsync(new AddPlayerCommand(_playerId, _playerName));
		}
	}

	private async Task StartAsync() => await _gameEntity.StartMatchAsync();
	private async Task EndRoundAsync() => await _gameEntity.EndRoundAsync(_playerId);

	private async Task FieldClickAsync(Field field)
	{
		if (_attacking || _gameState == null || _gameState.ActivePlayerId != _playerId)
		{
			return;
		}

		if (string.IsNullOrEmpty(_fromFieldId))
		{
			if (field.OwnerId == _playerId)
			{
				_fromFieldId = field.Id;
			}
		}
		else if (field.Id == _fromFieldId)
		{
			_fromFieldId = "";
		}
		else if (field.OwnerId != _playerId)
		{
			await _gameEntity.AttackFieldAsync(new AttackMoveCommand(_playerId, _fromFieldId, field.Id));
			_attacking = true;
		}

		StateHasChanged();
	}

	public void Dispose()
	{
		if (_gameEntity is GameEntityService service)
		{
			service.NewStateReceived -= NewState;
		}
	}
}