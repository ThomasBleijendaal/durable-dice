@implements IDisposable

@page "/"
@page "/{gameId}"

@using DurableDice.Common.Models.State;

@if (!_connected)
{
	<p class="connection-state">Connecting..</p>
}

@if (string.IsNullOrEmpty(_playerName))
{
	<input placeholder="Enter your name" @bind="@_newPlayerName" maxlength="16" />
	<button @onclick="JoinAsync" class=@_buttonClassName>Join</button>
}
else if (_gameState == null)
{
	<p>Loading..</p>
}
else if (_gameState != null)
{
	<div class="players">
		@foreach (var (player, index) in _players)
		{
			var fields = _gameState.PlayerFieldCount(player);
			var className = $"player player-{index}";
			if (player.Id == _gameState.ActivePlayerId)
			{
				className += " player-active";
			}
			if (player.Id == _playerId)
			{
				className += " player-you";
			}
			if (fields == 0)
			{
				className += " player-dead";
			}
			if (!player.IsReady)
			{
				className += " player-not-ready";
			}

			<div class=@className>
				@player.Name (@player.ContinuousFieldCount | @player.DiceBuffer)
			</div>
		}
	</div>

	if (!_gameState.Fields.Any())
	{
		<div class="buttons">
			@if (!_gameState.Player(_playerId).IsReady)
			{
				<button @onclick="ReadyAsync" class=@_buttonClassName>Ready</button>
			}
		</div>
	}

	if (_gameState.Winner is Player winner)
	{
		<p class="winner player-@_gameState.WinnerIndex">@winner.Name won</p>
	}
	else if (_gameState.Fields.Any())
	{
		<div class="buttons">
			@if (_gameState.PlayerIsDead(_playerId))
			{
				<p>You are dead.</p>
			}
			else if (_gameState.ActivePlayerId == _playerId)
			{
				<p>It's your turn! Clik on one of your fields and attack your neighbor or <button @onclick="EndRoundAsync" class=@_buttonClassName>end round</button></p>
			}
			else
			{
				<p>Please wait for your turn.</p>
			}
		</div>

		<div class="fields @(_attacking ? "wait" : "")">
			@foreach (var (field, index) in _fields)
			{
				var ownerIndex = _gameState.Players.FindIndex(x => x.Id == field.OwnerId);
				var fieldModifier = field.Id[^1];
				var className = $"hexagon field-{index} player-{ownerIndex}  mod-{fieldModifier}";
				var modifierClassName = "modifier";
				var labelClassName = "label";

				if (_gameState.ActivePlayerId == _playerId)
				{
					if (_playerId == field.OwnerId && field.DiceCount > 1 ||
						(field.OwnerId != _playerId && !string.IsNullOrWhiteSpace(_fromFieldId) && _gameState.Geometry.AreNeighboringFields(_fromFieldId, field.Id)))
					{
						className += " field-attackable";
						labelClassName += " field-attackable";
					}

					if (field.Id == _fromFieldId)
					{
						labelClassName += " label-attack";
					}
					if (field.Id == _toFieldId)
					{
						labelClassName += " label-defend";
					}
				}

				if (field.Id != _fromFieldId)
				{
					if (_gameState.PreviousAttack?.IsSuccessful == true && field.Id == _gameState.PreviousAttack?.DefendingFieldId)
					{
						modifierClassName += " mod-attacking-success";
					}
					else if (_gameState.PreviousAttack?.IsSuccessful == false && field.Id == _gameState.PreviousAttack?.AttackingFieldId)
					{
						modifierClassName += " mod-defending-success";
					}

					if (field.DiceAdded > 0)
					{
						modifierClassName += $" mod-{field.DiceAdded}-dice-added";
					}
				}

				@foreach (var coordinate in field.Coordinates)
				{
					var (left, top) = Position(coordinate);

					<div class=@className style="left: @(left)px; top: @(top)px;" @onclick=@(() => FieldClickAsync(field)) onmouseenter="this.parentNode.dataset.hover = '@index'" onmouseleave="this.parentNode.dataset.hover = ''">
						<div class="left"></div>
						<div class="middle"></div>
						<div class="right"></div>
						<div class="hover">
							<div class="left"></div>
							<div class="middle"></div>
							<div class="right"></div>
							<div class=@modifierClassName>
								<div class="left"></div>
								<div class="middle"></div>
								<div class="right"></div>
							</div>
						</div>
					</div>
				}

				{
					var (left, top) = Position(field.Center);

					<div class=@labelClassName style="left: @(left)px; top: @(top)px;" @onclick=@(() => FieldClickAsync(field)) onmouseenter="this.parentNode.dataset.hover = '@index'" onmouseleave="this.parentNode.dataset.hover = ''">
						@field.DiceCount
					</div>
				}
			}
		</div>

		@if (_gameState.PreviousAttack is Attack attack)
		{
			<div class="attack">
				<div class="attacker player-@(_gameState.PlayerIndex(attack.AttackerId))">@attack.AttackingDiceCount</div>
				<div class="attacked">@DescribeAttack(attack)</div>
				<div class="defender player-@(_gameState.PlayerIndex(attack.DefenderId))">@attack.DefendingDiceCount</div>
			</div>
		}
	}
}
